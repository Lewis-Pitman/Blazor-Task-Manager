@page "/"

@rendermode InteractiveServer

@inject TabService tabService
@inject TaskService taskService

<!-- Header -->
<ControlHeader OnScreenChange="SetScreen" OnDarkModeToggle="ToggleDarkMode" OnActiveTabChange="SetCurrentTab" />

<!-- Screens -->
@if(!isEditing && !isViewing)
{
    @switch(CurrentScreen){
        case "Task list":
            <TaskList CurrentTabId="@CurrentTabId" StateHasChanged="@taskListStateHasChanged" />
            
            <AddTask CurrentTabId="@CurrentTabId" OnSubmitClicked="@OnSubmitClicked" />
            <button @onclick="DeleteAllClicked">Delete all</button>
            break;

        case "Kanban":
            <Kanban />

            <!-- Temporary element below to test viewing a task -->
            <ViewTask taskItem="@(new TaskItem{Title = "View test", Description = "This is a description", Status = "To-do" })" />
            break;

        default:
            <Dashboard CurrentTabId="@CurrentTabId" />
            break;
    }
}

<p>isViewing:</p> <InputCheckbox @bind-Value="@isViewing" />

@code {
    private Guid CurrentTabId { get; set; }

    private string CurrentScreen { get; set; }
    private bool IsDarkMode { get; set; }

    // Temporary..?
    private bool isEditing;
    private bool isViewing;

    private bool taskListStateHasChanged;

    private void OnSubmitClicked(){
        taskListStateHasChanged = true;
    }

    private void DeleteAllClicked()
    {
        var allTabs = tabService.GetAllTabs();

        foreach(var tab in allTabs){
            taskService.RemoveAllTasksWithTabId(tab.Id);
            tabService.RemoveTab(tab);
        }
    }

    private void SetCurrentTab(Guid currentTabId){
        CurrentTabId = currentTabId;
        StateHasChanged();
    }

    private void SetScreen(string newScreen)
    {
        CurrentScreen = newScreen;
        StateHasChanged();
    }

    private void ToggleDarkMode(bool isDarkMode)
    {
        IsDarkMode = isDarkMode;
        StateHasChanged();
    }
}
