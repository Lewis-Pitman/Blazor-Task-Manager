@inject TaskService taskService
@inject IModalService Modal
@rendermode InteractiveServer

@if (isViewing)
{
    <EditTask taskItem="@selectedTask" />
}

<MudDataGrid T="TaskItem" @ref="dataGrid" Items="@allTasks" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged" Elevation="0" Style="background-color: transparent; margin-top: 10px;"
             HeaderClass="blue" Striped="true">
    <ToolBarContent>
        <MudPaper Class="black">
            <MudText Typo="Typo.h6">Task List</MudText>
        </MudPaper>

        <MudSpacer />

        <!-- Search bar -->
        <MudPaper Class="black">
            <MudTextField @bind-Value="_searchString" Placeholder="Titles and descriptions" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </MudPaper>
        <MudSpacer />

        <!-- Date search bar -->
        <MudPaper Class="black">
            <MudDatePicker @bind-Date="_searchDate" Editable="true" ImmediateText="true" 
            Placeholder="Day / Month / Year" DateFormat="dd.MM.yyyy" Clearable="true" />
        </MudPaper>
        <MudSpacer />

        <!-- Status dropdown -->
        <MudPaper Class="black">
            <MudSelect @bind-Value="_searchStatus" Placeholder="Status" Clearable="true">
                <MudSelectItem Value="@("To-do")">To-do</MudSelectItem>
                <MudSelectItem Value="@("In progress")">In progress</MudSelectItem>
                <MudSelectItem Value="@("Done")">Done</MudSelectItem>
            </MudSelect>
        </MudPaper>

    </ToolBarContent>
    <Columns>
        <SelectColumn T="TaskItem" />
        <PropertyColumn Property="task => task.Title" Title="Title" Filterable="false" />
        <PropertyColumn Property="task => task.Description" Title="Description" Filterable="false" />
        <PropertyColumn Property="task => task.DueDate.ToString().Substring(0, 10)" Title="Due date" Filterable="false" />
        <PropertyColumn Property="task => task.Status" Title="Status" Filterable="false" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TaskItem" />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter]
    public Guid CurrentTabId { get; set; }

    [Parameter]
    public bool StateHasChanged { get; set; }

    private MudDataGrid<TaskItem> dataGrid;

    private IEnumerable<TaskItem> allTasks;

    private bool isViewing = false;
    private TaskItem selectedTask;

    protected override void OnParametersSet()
    {
        allTasks = taskService.GetAllTasksWithTabId(CurrentTabId);
        StateHasChanged = false;

        base.OnParametersSet();
    }


    // Data grid (Mudblazor):
    // https://mudblazor.com/components/datagrid#advanced-data-grid

    private List<TaskItem> _selectedTasks = new();

    private string _searchString;
    private DateTime? _searchDate;
    private string? _searchStatus;

    // Quick filter - filter globally across multiple columns with the same input
    private Func<TaskItem, bool> _quickFilter => task =>
    {

        // If date search is empty, move to next checks, otherwise check to see if it is equal.
        if (_searchDate != null && task.DueDate != _searchDate)
            return false;

        // Status
        if (_searchStatus != null && task.Status != _searchStatus)
            return false;

        // Returning false if conditions are met above allows us to filter down further, rather than
        // ignoring whats in the other filters

        // If nothing is searched, all items can be returned
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // If something is searched, and the task's title or description contains the search term, return it
        if (task.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (task.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // If above checks failed, the task is not in the search results, so return false for that task
        return false;
    };

    // Events
    void RowClicked(DataGridRowClickEventArgs<TaskItem> args)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditTask.taskItem), args.Item);

        var options = new ModalOptions {  Size = ModalSize.Medium };

        Modal.Show<EditTask>("Test", parameters, options);
    }

    void SelectedItemsChanged(HashSet<TaskItem> items)
    {
        _selectedTasks = items.ToList();
    }
}
