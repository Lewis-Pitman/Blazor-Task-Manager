@inject TaskService taskService
@inject IModalService Modal
@rendermode InteractiveServer

<!-- Grid -->
<MudDataGrid T="TaskItem" @ref="dataGrid" Items="@allTasks" MultiSelection="true" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged" Elevation="0" Style="position: relative; top: 0px; height: 100%; width: 100%;"
HeaderClass="blue" RowStyleFunc="RowStyleFunc">
    <ToolBarContent>
        <MudPaper Class="black">
            <MudText Typo="Typo.h6">Task List</MudText>
        </MudPaper>

        <MudSpacer />

        <!-- Search bar -->
        <MudPaper Class="black">
            <MudTextField @bind-Value="_searchString" Placeholder="Titles and descriptions" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </MudPaper>
        <MudSpacer />

        <!-- Date search bar -->
        <MudPaper Class="black">
            <MudDatePicker @bind-Date="_searchDate" Editable="true" ImmediateText="true" 
            Placeholder="Day / Month / Year" DateFormat="dd.MM.yyyy" Clearable="true" />
        </MudPaper>
        <MudSpacer />

        <!-- Status dropdown -->
        <MudPaper Class="black">
            <MudSelect @bind-Value="_searchStatus" Placeholder="Status" Clearable="true">
                <MudSelectItem Value="@("To-do")">To-do</MudSelectItem>
                <MudSelectItem Value="@("In progress")">In progress</MudSelectItem>
                <MudSelectItem Value="@("Done")">Done</MudSelectItem>
            </MudSelect>
        </MudPaper>
        <MudSpacer />

        <!-- Utility buttons -->
        <MudPaper Class="toolbar-utility">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Warning" OnClick="OnDeleteClicked" />
            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit status" Color="Color.Primary" OnClick="OnEditStatusClicked" />
            <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add new" Color="Color.Primary" OnClick="OnAddClicked" />
        </MudPaper>

    </ToolBarContent>
    <Columns>
        <SelectColumn T="TaskItem" />
        <PropertyColumn Property="task => task.Title" Title="Title" Filterable="false" />
        <PropertyColumn Property="task => task.Description" Title="Description" Filterable="false" />
        <PropertyColumn Property="task => task.DueDate.ToString().Substring(0, 10)" Title="Due date" Filterable="false" />
        <PropertyColumn Property="task => task.Status" Title="Status" Filterable="false" />
    </Columns>
    <PagerContent>
        <!-- CSS classes don't function correctly when working with this element, so style is used instead -->
        <MudDataGridPager T="TaskItem" Style="position: fixed !important; 
                                       bottom: 0px !important; 
                                       width: 100% !important;
                                       background-color: black !important;" />
    </PagerContent>
</MudDataGrid>

<!-- Message popups -->
<MudMessageBox @ref="confirmDeleteMessage" Title="Warning" CancelText="Cancel">
    <MessageContent>
        This action will <b>delete all currently selected tasks.</b> this <b>cannot</b> be undone.
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public Guid CurrentTabId { get; set; }

    [Parameter]
    public bool StateHasChanged { get; set; }

    private MudDataGrid<TaskItem> dataGrid;

    private IEnumerable<TaskItem> allTasks;

    private bool isViewing = false;
    private TaskItem selectedTask;

    protected override void OnParametersSet()
    {
        allTasks = taskService.GetAllTasksWithTabId(CurrentTabId);
        StateHasChanged = false;

        base.OnParametersSet();
    }

    // Data grid (Mudblazor):
    // https://mudblazor.com/components/datagrid#advanced-data-grid

    private List<TaskItem> _selectedTasks = new();

    private string _searchString;
    private DateTime? _searchDate;
    private string? _searchStatus;

    // Quick filter - filter globally across multiple columns with the same input
    private Func<TaskItem, bool> _quickFilter => task =>
    {

        // If date search is empty, move to next checks, otherwise check to see if it is equal.
        if (_searchDate != null && task.DueDate != _searchDate)
            return false;

        // Status
        if (_searchStatus != null && task.Status != _searchStatus)
            return false;

        // Returning false if conditions are met above allows us to filter down further, rather than
        // ignoring whats in the other filters

        // If nothing is searched, all items can be returned
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        // If something is searched, and the task's title or description contains the search term, return it
        if (task.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (task.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        // If above checks failed, the task is not in the search results, so return false for that task
        return false;
    };

    // Events
    void RowClicked(DataGridRowClickEventArgs<TaskItem> args)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditTask.taskItem), args.Item);

        var options = new ModalOptions {  Size = ModalSize.Medium };

        Modal.Show<EditTask>("Test", parameters, options);
    }

    void SelectedItemsChanged(HashSet<TaskItem> items)
    {
        _selectedTasks = items.ToList();
    }

    // Toolbar buttons:
    private MudMessageBox confirmDeleteMessage;

    private void OnEditStatusClicked()
    {
        // Modal.Show<EditStatus>();
        // ^^^ Add this component w/ styling
    }

    private void OnAddClicked()
    {
        Modal.Show<AddTask>();
    }

    private async void OnDeleteClicked()
    {
        bool? confirmDelete = await DeletePopupAsync();

        if (confirmDelete == true)
        {
            foreach (var task in _selectedTasks)
            {
                taskService.RemoveTask(task);
            }

            allTasks = taskService.GetAllTasksWithTabId(CurrentTabId);
        }
    }

    private async Task<bool?> DeletePopupAsync()
    {
        bool? result = await confirmDeleteMessage.ShowAsync();
        result = result == null ? false : true;
        StateHasChanged();

        return result;
    }

    // Datagrid rows
    private string RowStyleFunc(TaskItem arg, int index)
    {
        switch (arg.Status)
        {
            case "To-do":
                return "Background-color: rgba(240, 51, 57, 0.5);";
            case "In progress":
                return "Background-color: rgba(240, 240, 51, 0.5);";
            default:
                return "Background-color: rgba(51, 240, 95, 0.5);";

        }
    }
}
