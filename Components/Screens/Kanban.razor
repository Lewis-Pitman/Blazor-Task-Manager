@inject TaskService taskService
@inject IDialogService DialogService
@rendermode InteractiveServer

<!-- https://mudblazor.com/components/dropzone#miscellaneous-kanban -->

<MudDropContainer T="TaskItem" @ref="_dropContainer" Items="@allTasks" ItemsSelector="@((item,column) => item.Status == column)" 
ItemDropped="TaskUpdated" Class="d-flex flex-row" Style="position: relative !important;
														 width: 100% !important;
														 bottom: 0px !important;">
	<ChildContent>
		@foreach (var item in _sections)
		{
			<MudPaper Elevation="0" Width="100%" MinHeight="100%" Class="d-flex flex-column" Style="background-color: #2d2d2d !important;">
				<!-- Style attribute used instead of class as class doesn't appear to work -->
				<MudToolBar Gutters="false" Style="background-color: #2196f3 !important;
												   color: white !important;
												   text-align: center !important;">
					<MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
				</MudToolBar>
				<MudDropZone T="TaskItem" Identifier="@item.Name" Class="mud-height-full" />

				<MudButton OnClick="@(() => OpenAddTaskDialogAsync(item.Name))" StartIcon="@Icons.Material.Filled.Add"
				FullWidth="true" Style="background-color: black !important;
										display: fixed !important;
										bottom: 0px !important;
										border-radius: 0px !important;">
					Add Task
				</MudButton>

			</MudPaper>
		}
	</ChildContent>
	<ItemRenderer>
		<!-- Tasks -->
		<MudPaper Elevation="0" Class="pa-4 rounded-lg my-3 mx-3">
			<h2><b>@context.Title</b></h2>
			<br />
			<p><b>Description</b>: @context.Description</p>
			<br />
			@if(context.DueDate != null)
			{
				<p><b>Due by:</b> @context.DueDate.ToString().Substring(0, 10)</p>
			}
			else
			{
				<p><b>No due date</b></p>
			}

			<MudToolBar Gutters="false">
				<MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Warning" OnClick="@(() => OnDeleteClicked(context))" />
				<MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="edit" Color="Color.Primary" OnClick="@(() => OnEditClicked(context))" />
			</MudToolBar>
		</MudPaper>
	</ItemRenderer>
</MudDropContainer>

<!-- Message popups -->
<MudMessageBox @ref="confirmDeleteMessage" Title="Warning" CancelText="Cancel">
	<MessageContent>
		This action will <b>delete all currently selected tasks.</b> this <b>cannot</b> be undone.
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete</MudButton>
	</YesButton>
</MudMessageBox>

@code {
	private MudDropContainer<TaskItem> _dropContainer;

	private List<TaskItem> allTasks;

	private Guid currentTabId;

	[Parameter]
	public Guid CurrentTabId
	{
		get { return currentTabId; }
		set
		{
			currentTabId = value;
			UpdateBoard(value);
		}
	}

	private async void UpdateBoard(Guid tabId)
	{
		allTasks = await taskService.GetAllTasksWithTabIdAsync(tabId);

		// Force next render cycle
		await Task.Delay(1);

		_dropContainer?.Refresh();
		StateHasChanged();
	}

	protected override void OnInitialized()
	{
		_dropContainer?.Refresh();
	}

	private void TaskUpdated(MudItemDropInfo<TaskItem> info)
	{
		// Update position on board
		info.Item.Status = info.DropzoneIdentifier;

		// Save change to database
		taskService.EditTask(info.Item.Id, info.Item);
	}

	// Setup for board
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections("To-do", false, String.Empty),
			new KanBanSections("In progress", false, String.Empty),
			new KanBanSections("Done", false, String.Empty),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string name, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}

	private IDialogReference? _dialogReference;

	private async void OnTaskAdded()
	{
		UpdateBoard(currentTabId);

		DialogService.Close(_dialogReference);
	}

	private async void OpenAddTaskDialogAsync(string selectedStatus)
	{
		var parameters = new DialogParameters<AddTask>
		{
			{ addTask => addTask.CurrentTabId, CurrentTabId },
			{ addTask => addTask.OnSubmitClicked, EventCallback.Factory.Create(this, OnTaskAdded) },
			{ addTask => addTask.SelectedStatus, selectedStatus }
		};

		var options = new DialogOptions { CloseOnEscapeKey = true };

		_dialogReference = DialogService.Show<AddTask>("Add task", parameters, options);
	}

	// Delete task
	private MudMessageBox confirmDeleteMessage;

	private async void OnDeleteClicked(TaskItem task)
	{
		bool? confirmDelete = await DeletePopupAsync();

		if (confirmDelete == true)
		{
			taskService.RemoveTask(task);
			UpdateBoard(currentTabId);
		}
	}

	private async Task<bool?> DeletePopupAsync()
	{
		bool? result = await confirmDeleteMessage.ShowAsync();
		result = result == null ? false : true;
		StateHasChanged();

		return result;
	}

	// Edit task

	private async void OnSaveTaskClicked()
	{
		UpdateBoard(currentTabId);
		DialogService.Close(_dialogReference);
	}

	private void OnCloseTaskClicked()
	{
		DialogService.Close(_dialogReference);
	}

	private void OnEditClicked(TaskItem task)
	{
		var parameters = new DialogParameters<EditTask>
		{
			{ viewTask => viewTask.TaskId, task.Id },
			{ viewTask => viewTask.OnSaveClicked, EventCallback.Factory.Create(this, OnSaveTaskClicked) },
			{ viewTask => viewTask.OnCloseClicked, EventCallback.Factory.Create(this, OnCloseTaskClicked) }
		};

		var options = new DialogOptions { CloseOnEscapeKey = true };

		_dialogReference = DialogService.Show<EditTask>("Edit task", parameters, options);
	}
}