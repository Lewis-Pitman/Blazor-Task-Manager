@inject TaskService taskService
@inject IDialogService DialogService

<div class="task-stats">
	<span class="stat-block red">
		<p>To-do</p>
		<p class="number">@todoTasks</p>
	</span>

	<span class="stat-block yellow">
		<p>In progress</p>
		<p class="number">@inProgressTasks</p>
	</span>

	<span class="stat-block green">
		<p>Done</p>
		<p class="number">@doneTasks</p>
	</span>
</div>

<div class="todays-task-block blue">
	<p style="width: 100%; background-color: black;"> <b>Today's tasks:</b> </p>

	@if(todaysTasks?.Count != 0)
	{
        <MudDataGrid T="TaskItem" Items="@todaysTasks" MultiSelection="true"
                     RowClick="@RowClicked" Elevation="0" HeaderClass="blue" RowStyleFunc="RowStyleFunc">
            <Columns>
                <PropertyColumn Property="@(task => StringHelper.ShortenString(task.Title, "title", 45))" Title="Title" Filterable="false" />
                <PropertyColumn Property="@(task => StringHelper.ShortenString(task.Description, "description", 80))" Title="Description" Filterable="false" />
                <PropertyColumn Property="@(task => task.DueDate != null ? task.DueDate.ToString().Substring(0, 10) : "No due date")" Title="Due date" Filterable="false" />
                <PropertyColumn Property="task => task.Status" Title="Status" Filterable="false" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="TaskItem" />
            </PagerContent>
        </MudDataGrid>
	}
	else
	{
		<p>You have no tasks due today</p>
	}
</div>

@code {
	[Parameter]
	public Guid CurrentTabId { get; set; }

	// Tab stats
	private int todoTasks;
	private int inProgressTasks;
	private int doneTasks;

	private List<TaskItem>? todaysTasks;

	protected async override void OnParametersSet()
	{
		var allTasks = await taskService.GetAllTasksWithTabIdAsync(CurrentTabId);

		todoTasks = allTasks.Where(task => task.Status == "To-do").Count();
		inProgressTasks = allTasks.Where(task => task.Status == "In progress").Count();
		doneTasks = allTasks.Where(task => task.Status == "Done").Count();

		todaysTasks = await taskService.GetTaskByDateAsync(DateTime.Today, CurrentTabId);

		base.OnParametersSet();
	}

	// Todays tasks datagrid
	private IDialogReference? _dialogReference;

	private async void OnSaveTaskClicked()
	{
		todaysTasks = await taskService.GetTaskByDateAsync(DateTime.Today, CurrentTabId);

		DialogService.Close(_dialogReference);
	}

	private void OnCloseTaskClicked()
	{
		DialogService.Close(_dialogReference);
	}

	private void RowClicked(DataGridRowClickEventArgs<TaskItem> args)
	{
		var parameters = new DialogParameters<EditTask>
		{
			{ viewTask => viewTask.TaskId, args.Item.Id },
			{ viewTask => viewTask.OnSaveClicked, EventCallback.Factory.Create(this, OnSaveTaskClicked) },
			{ viewTask => viewTask.OnCloseClicked, EventCallback.Factory.Create(this, OnCloseTaskClicked) }
		};

		var options = new DialogOptions { CloseOnEscapeKey = true };

		_dialogReference = DialogService.Show<EditTask>("Edit task", parameters, options);
	}

	private string RowStyleFunc(TaskItem arg, int index)
	{
		// Hacky solution to styling problems
		// Datagrid does have built-in row stripes, but these would be black due to background colour needing
		// to be black to have the black toolbar

		string lighterStripe = "background-color: #2d2d2d;";
		string darkerStripe = "background-color: #535353;";

		return index % 2 == 0 ? lighterStripe : darkerStripe;
	}
}
