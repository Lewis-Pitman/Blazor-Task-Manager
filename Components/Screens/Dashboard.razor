@inject TaskService taskService

<div class="task-stats">
	<span class="stat-block red">
		<p>To-do</p>
		<p class="number">@todoTasks</p>
	</span>

	<span class="stat-block yellow">
		<p>In progress</p>
		<p class="number">@inProgressTasks</p>
	</span>

	<span class="stat-block green">
		<p>Done</p>
		<p class="number">@doneTasks</p>
	</span>
</div>

<div class="todays-task-block blue">
	<p>Today's tasks:</p>

	@if(todaysTasks?.Count != 0)
	{
		@foreach(var task in todaysTasks)
		{
			<p>Title: @(StringHelper.ShortenString(task.Title, "title", 30))
				Description: @(StringHelper.ShortenString(task.Description, "description", 50))
				Status: @task.Status</p>
		}
	}
	else
	{
		<p>You have no tasks due today</p>
	}
</div>

@code {
	[Parameter]
	public Guid CurrentTabId { get; set; }

	// Tab stats
	private int todoTasks;
	private int inProgressTasks;
	private int doneTasks;

	private List<TaskItem>? todaysTasks;

	protected async override void OnParametersSet()
	{
		var allTasks = await taskService.GetAllTasksWithTabIdAsync(CurrentTabId);

		todoTasks = allTasks.Where(task => task.Status == "To-do").Count();
		inProgressTasks = allTasks.Where(task => task.Status == "In progress").Count();
		doneTasks = allTasks.Where(task => task.Status == "Done").Count();

		todaysTasks = await taskService.GetTaskByDateAsync(DateTime.Today, CurrentTabId);

		base.OnParametersSet();
	}
}
